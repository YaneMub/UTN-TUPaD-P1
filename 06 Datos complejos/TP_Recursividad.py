"""EJERCICIO 1

Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario

"""

def factorial(num):
    if num == 0:
        fact = 1
    else:
        fact = factorial(num - 1) * num
    return fact

# Pedir al usuario un n√∫mero entero
n = int(input("Ingresa un n√∫mero entero: "))

# Mostrar el factorial de todos los n√∫meros desde 1 hasta n
for i in range(1, n + 1):
    print(f"El factorial de {i} es {factorial(i)}")




"""EJERCICIO 2

Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique

"""

def fibonacci(posicion):
    if posicion == 0:
        return 0
    elif posicion == 1:
        return 1
    else: 
        return fibonacci(posicion - 1 )+ fibonacci(posicion - 2)
    
print(fibonacci(5))

# Pedir al usuario una posici√≥n
n = int(input("Ingrese hasta qu√© posici√≥n quiere ver la serie de Fibonacci: "))

# Mostrar la serie completa
print("Serie de Fibonacci:")
for i in range(n + 1):
    print(f"F({i}) = {fibonacci(i)}")




"""EJERCICIO 3

Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõ
ùëö = ùëõ ‚àó ùëõ
(ùëö‚àí1)
. Prueba esta funci√≥n en un
algoritmo general.

"""

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)
    
# Pedimos al usuario la base y el exponente
base = int(input("Ingresa la base: "))
exponente = int(input("Ingresa el exponente: "))

# Calculamos y mostramos la potencia
resultado = potencia(base, exponente)
print(f"{base} elevado a la {exponente} es igual a {resultado}")



"""EJERCICIO 4

Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto.

"""
decimal = []

def convertir_Binario(num):
    if num < 2:
        return str(num)
    else:
        return convertir_Binario(num // 2) + str(num % 2)

print(convertir_Binario(10))



"""EJERCICIO 5

Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
 Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed().

-> PAL√çNDROMO: Palabra que se lee igual al derecho y al rev√©s.

"""

# Importamos el m√≥dulo unicodedata, que nos permite manipular y analizar caracteres Unicode.
import unicodedata

# Definimos la funci√≥n que va a limpiar la palabra (sacar tildes y convertir a min√∫scula)
def limpiar_palabra(palabra):
    palabra = palabra.lower() 
    # Normalizamos la palabra usando 'NFD'.
    # Esto separa letras acentuadas en dos partes: la letra base + el acento.
    palabra = ''.join(
        # Este bucle recorre cada car√°cter "c" de la palabra normalizada.
        c for c in unicodedata.normalize('NFD', palabra)
        # Filtramos los caracteres: solo nos quedamos con los que NO sean tildes u otros adornos.
        if unicodedata.category(c) != 'Mn'
    ) #usamos join para unir todo ya transformado (en minuscula y sin tildes).
    return palabra

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])


entrada = input("Ingresa una palabra: ")
palabra_limpia = limpiar_palabra(entrada)
print(es_palindromo(palabra_limpia))



"""EJERCICIO 6

Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

"""

def suma_digitos(n):
    if n < 10:
        return n
    else:
       #El operador % (m√≥dulo) devuelve el resto de una divisi√≥n, saca el √∫ltimo d√≠gito de num.
       # n // 10 ‚Üí Quita el √∫ltimo d√≠gito
       return (n % 10) + suma_digitos(n // 10) # Es decir, retornamos el √∫ltimo d√≠gito y 
       #le devolvemos a la funci√≥n la divisi√≥n entera de num sin el resto para sumar 1 d√≠gito a la vez.

num = int(input("Ingresa el n√∫mero que deseas sumar: "))
print("La suma de sus d√≠gitos es:", suma_digitos(num))



"""EJERCICIO 7

Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.

"""

def contar_bloques(num):
    if num == 1:
        return num 
    else:
        return num + contar_bloques(num - 1)
    
print(contar_bloques(4))



"""EJERCICIO 8

Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero.

"""

def contar_digito(numero, digito):

    if numero <= 0:
        print("El n√∫mero ingresado debe ser positivo.")
        return 0  # Devuelve algo para que no devuelva "none"
     
    if numero < 10:
        if numero == digito:
            return 1
        else:
            return 0
    else:
        if numero % 10 == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)
        
        
numero = int(input("Ingrese un n√∫mero entero: "))
digito = int(input("Ingresa un d√≠gito: "))

print(contar_digito(numero,digito))